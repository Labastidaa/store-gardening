generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  fullName  String
  email     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cart   Cart?
}

model Category {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String
  description String
  products    Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String      @db.VarChar(2000)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  price       Int
  sku         Int
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]

  @@index([categoryId])
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [clerkId])

  CartItem CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  qty       Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User?       @relation(fields: [userId], references: [clerkId])
  userId     String?
  total      Int
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid())
  qty       Int
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
